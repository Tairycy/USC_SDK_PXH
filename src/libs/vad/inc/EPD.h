// EPD.h: interface for the EPD class.
//
//////////////////////////////////////////////////////////////////////

#ifndef __EPD_H__
#define __EPD_H__
#include "commons.h"
#include "FFT.h"
#include "CNoiseMask.h"
//#define __LOG_EPD__

#define EPD_FRAME_THRD_LTE		10
#define EPD_LAMDA_LTE			0.87
#define EPD_LAMDA_LTE_HIGH_E	0.89
#define EPD_SNR_UPD_LTE			20
#define EPD_SNR_THRD_ST			30//35 for NTV Voice Tagging;10 for Car Condition
#define EPD_SNR_THRD_ED			7//20//

#define EPD_MIN_FRAME			10
#define EPD_MIN_HANGOVER		5
#define EPD_HANGOVER			100

#define BAND_LIMIT
#ifdef BAND_LIMIT
#define LO_FREQ			200
#define HI_FREQ			3750
#define SM_FREQ			16000
#endif

#define MIN_FILTER		10
#define MAX_FILTER		25//40 for Japanese NTV,70 for American BYU

#define MASK_PRECISION	8
#define MASK_HI		4
#define MASK_LO		1

#ifdef 	FIXED_POINT
#define __FIX_POINT__
#endif

#ifdef __FIX_POINT__
typedef IVector PARAM_VECTOR;
typedef int	PARAM_TYPE;
#else
typedef FVector PARAM_VECTOR;
typedef float PARAM_TYPE;
#endif



#ifdef __FIX_POINT__
#define PRE_EMPHASIS	31785//0.97*Q15
#define M_SQRT2     1.41421356237309504880
#define FFT_SHIFT	29
#define FIX_QN_FFT	(__int64)(1.0 *( 1<<FFT_SHIFT )/ M_SQRT2)
#define FFT_LENGTH	512
#else
#define PRE_EMPHASIS	0.97f
#endif
typedef struct Spectrum{
    SVector	audio_buffer;
    FVector spectrum;
	Spectrum( int frmlen,int sftlen ){
		audio_buffer.resize( sftlen );
		int n = 1;
		while( n<frmlen )
			n *= 2;
		spectrum.resize( n/2+1 );
	}
}Spectrum;
	
class EPD  
{
public:
	EPD( const int nFrmLen,const int nSftLen,const int nHstLen,
		const int nDownLen = 16,const int SnrS = EPD_SNR_THRD_ST,const int SnrE = EPD_SNR_THRD_ED);
	virtual ~EPD();
	typedef enum{ EPD_SILENCE = 0,EPD_SPEECH,EPD_INIT }EPD_TYPE;
	void	Feed( Spectrum& frame,Result* res );
	int		GetOffset();
	void	Reset();
public:
protected:
	int		m_nFrmLen;
	int		m_nSftLen;
	int		m_nFFTLen;
	int		m_nHisLen;	//Histogram frames needed for noise masking,currently 120 frames
	int		m_nDowLen;
	int		m_nCurFrm;
 
	float	m_maskLo;
	float	m_maskHi;	
	char	m_measure;

	int		m_nST;
	int		m_nbSpeechFrm;
 	int		m_nHangOver;

	PARAM_TYPE	m_last_sample;
	PARAM_VECTOR m_FrmWin;
	PARAM_VECTOR m_HamWin;
	
	
	bool	m_bST;
	CVector	m_chBufMin;
	CVector	m_chBufMax;


	int		m_SnrS;
	int		m_SnrE;

	CNoiseMask* m_pMask;
	FFT*	m_pFFT;

//temporary member
	FVector m_noiseM;
	float	m_SigM;
	float	m_SigT;
	bool	m_bTH;
protected:
#ifdef __FIX_POINT__
	static void rfft_fix( int* x,int n,int m );
#endif
	void	PreEmph( PARAM_VECTOR& re );
	void	HammWin( PARAM_VECTOR& re );
	float	SpectralEnergy( Spectrum& frame );
	void	DownSample( Spectrum& frame,FVector& spectrum );
	char	EstimateMeasure( FVector& spectrum,FMatrix& maskM );
#ifdef __LOG_EPD__
	FILE*	fp;
#endif
};


const static int SinTab[] = {
	496004044,	205451608,	205451601,	496004047,
	526555087,	104738321,	446391848,	298269498,
	496004044,	205451608,	205451601,	496004047,
	446391848,	298269498,	-104738321,	526555087,
	534285731,	52622552,	513753430,	155845399,
	526555087,	104738321,	446391848,	298269498,
	513753430,	155845399,	340587300,	415006827,
	496004044,	205451608,	205451601,	496004047,
	473477868,	253079206,	52622485,	534285738,
	446391848,	298269498,	-104738321,	526555087,
	415006812,	340587318,	-253079254,	473477842,
	536224227,	26343007,	531060095,	78775323,
	534285731,	52622552,	513753430,	155845399,
	531060095,	78775323,	485325555,	229541893,
	526555087,	104738321,	446391848,	298269498,
	520781562,	130448996,	397795084,	360540493,
	513753430,	155845399,	340587300,	415006827,
	505487617,	180866373,	276006780,	460489558,
	496004044,	205451608,	205451601,	496004047,
	485325555,	229541893,	130449020,	520781556,
	473477868,	253079206,	52622485,	534285738,
	460489529,	276006828,	-26343041,	536224225,
	446391848,	298269498,	-104738321,	526555087,
	431218753,	319813638,	-180866395,	505487609,
	415006812,	340587318,	-253079254,	473477842,
	397795105,	360540469,	-319813656,	431218739,
	536709216,	13175472,	535416236,	39494674,
	536224227,	26343007,	531060095,	78775323,
	535416236,	39494674,	523826092,	117629082,
	534285731,	52622552,	513753430,	155845399,
	532833392,	65718733,	500896688,	193217191,
	531060095,	78775323,	485325555,	229541893,
	528966905,	91784470,	467124388,	264622716,
	526555087,	104738321,	446391848,	298269498,
	523826092,	117629082,	423240274,	330299933,
	520781562,	130448996,	397795084,	360540493,
	517423332,	143190331,	370194248,	388827203,
	513753430,	155845399,	340587300,	415006827,
	509774058,	168406607,	309134654,	438937514,
	505487617,	180866373,	276006780,	460489558,
	500896694,	193217176,	241383228,	479546153,
	496004044,	205451608,	205451601,	496004047,
	490812620,	217562284,	168406554,	509774075,
	485325555,	229541893,	130449020,	520781556,
	479546142,	241383249,	91784447,	528966909,
	473477868,	253079206,	52622485,	534285738,
	467124388,	264622716,	13175421,	536709217,
	460489529,	276006828,	-26343041,	536224225,
	453577306,	287224656,	-65718748,	532833390,
	446391848,	298269498,	-104738321,	526555087,
	438937500,	309134673,	-143190308,	517423339,
	431218753,	319813638,	-180866395,	505487609,
	423240255,	330299958,	-217562349,	490812591,
	415006812,	340587318,	-253079254,	473477842,
	406523406,	350669496,	-287224594,	453577345,
	397795105,	360540469,	-319813656,	431218739,
	388827187,	370194265,	-350669514,	406523391,
	536830486,	6588232,	536507119,	19760727,
	536709216,	13175472,	535416236,	39494674,
	536507119,	19760727,	533599741,	59175097,
	536224227,	26343007,	531060095,	78775323,
	535860581,	32921321,	527800738,	98268799,
	535416236,	39494674,	523826092,	117629082,
	534891260,	46062084,	519141537,	136829967,
	534285731,	52622552,	513753430,	155845399,
	533599741,	59175097,	507669069,	174649626,
	532833392,	65718733,	500896688,	193217191,
	531986800,	72252473,	493445488,	211522873,
	531060095,	78775323,	485325555,	229541893,
	530053412,	85286319,	476547888,	247249845,
	528966905,	91784470,	467124388,	264622716,
	527800739,	98268791,	457067834,	281636948,
	526555087,	104738321,	446391848,	298269498,
	525230137,	111192078,	435110880,	314497850,
	523826092,	117629082,	423240274,	330299933,
	522343158,	124048380,	410796041,	345654434,
	520781562,	130448996,	397795084,	360540493,
	519141537,	136829967,	384255043,	374937911,
	517423332,	143190331,	370194248,	388827203,
	515627209,	149529117,	355631755,	402189545,
	513753430,	155845399,	340587300,	415006827,
	511802282,	162138212,	325081270,	427261680,
	509774058,	168406607,	309134654,	438937514,
	507669064,	174649641,	292769089,	450018484,
	505487617,	180866373,	276006780,	460489558,
	503230050,	187055852,	258870475,	470336531,
	500896694,	193217176,	241383228,	479546153,
	498487905,	199349403,	223568909,	488105848,
	496004044,	205451608,	205451601,	496004047,
	493445488,	211522873,	187055800,	503230070,
	490812620,	217562284,	168406554,	509774075,
	488105838,	223568930,	149529079,	515627220,
	485325555,	229541893,	130449020,	520781556,
	482472178,	235480302,	111192048,	525230144,
	479546142,	241383249,	91784447,	528966909,
	476547888,	247249845,	72252457,	531986802,
	473477868,	253079206,	52622485,	534285738,
	470336551,	258870439,	32921325,	535860581,
	467124388,	264622716,	13175421,	536709217,
	463841893,	270335114,	-6588210,	536830486,
	460489529,	276006828,	-26343041,	536224225,
	457067834,	281636948,	-46062107,	534891258,
	453577306,	287224656,	-65718748,	532833390,
	450018454,	292769135,	-85286389,	530053400,
	446391848,	298269498,	-104738321,	526555087,
	442697999,	303724969,	-124048434,	522343145,
	438937500,	309134673,	-143190308,	517423339,
	435110880,	314497850,	-162138250,	511802270,
	431218753,	319813638,	-180866395,	505487609,
	427261685,	325081263,	-199349425,	498487896,
	423240255,	330299958,	-217562349,	490812591,
	419155105,	335468886,	-235480309,	482472175,
	415006812,	340587318,	-253079254,	473477842,
	410796041,	345654434,	-270335106,	463841897,
	406523406,	350669496,	-287224594,	453577345,
	402189529,	355631773,	-303724935,	442698022,
	397795105,	360540469,	-319813656,	431218739,
	393340753,	365394892,	-335468954,	419155051,
	388827187,	370194265,	-350669514,	406523391,
	384255043,	374937911,	-365394933,	393340715,
};

#endif // !defined __EPD_H
